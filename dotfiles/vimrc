" Setup:
" After copying this file to your home directory, run the bin/setup-vim
" script to install the needed plugins.

" *** Plugins ***
" :PlugInstall ~ to install all listed Plugins
call plug#begin('~/.vim/plugged')
" Color Scheme
Plug 'joshdick/onedark.vim'
" Zen Mode :Goyo
Plug 'junegunn/goyo.vim'
" Linting
Plug 'w0rp/ale'
" Syntax
Plug 'sheerun/vim-polyglot'
" Completion
Plug 'Valloric/YouCompleteMe'
Plug 'neoclide/coc.nvim'
" Python
Plug 'vim-scripts/indentpython.vim'
call plug#end()


" Custom Background Color
if (has("autocmd") && !has("gui_running"))
	augroup colors
		autocmd!
		let s:background = { "gui": "#1D1D1D", "cterm": "234", "cterm16": "0" }
		autocmd ColorScheme * call onedark#set_highlight("Normal", { "bg": s:background }) "No `fg` setting
	augroup END
endif


" Fix .jsx and .vue files
augroup FiletypeGroup
	autocmd!
	au BufNewFile,BufRead *.jsx set filetype=javascript.jsx
	au BufNewFile,BufRead *.vue set filetype=javascript.vue
augroup END


" *** Plugin Settings ***
" YouCompleteMe
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_filepath_blacklist = {}
let g:ycm_filetype_blacklist = { 'dart': 1 }
" Goyo
let g:goyo_width = '60%'
let g:goyo_height = '100%'
let g:goyo_linenr = 1
" ALE
let g:ale_linter_aliases = {
\	'jsx': ['javascript'],
\	'vue': ['javascript'] }
let g:ale_linters = {
\	'javascript': ['prettier', 'eslint'],
\	'python': ['pylint', 'mypy'] }
let g:ale_fixers={
\	'javascript': ['prettier', 'eslint'],
\	'python': ['black', 'isort'],
\	'dart': ['dartfmt'] }
let g:ale_fix_on_save=1
" One Dark
colorscheme onedark


" *** Global Options ***
filetype plugin indent on
syntax on
set smartindent
set tabstop=2
set number
set splitbelow
set splitright
set encoding=utf-8
set backspace=indent,eol,start " Allow insert Backspace

" Enable background colors
set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set background=dark

" Config netrw
let g:netrw_banner=0

" Navigate Splits
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Goyo Quit
function! s:goyo_enter()
	let b:quitting = 0
	let b:quitting_bang = 0
	autocmd QuitPre <buffer> let b:quitting = 1
	cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
endfunction

function! s:goyo_leave()
	" Quit Vim if this is the only remaining buffer
	if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
		if b:quitting_bang
			qa!
		else
			qa
		endif
	endif
endfunction

autocmd! User GoyoEnter call <SID>goyo_enter()
autocmd! User GoyoLeave call <SID>goyo_leave()


" Toggle Status Line
let s:hidden_all = 0
function! ToggleHiddenAll()
	if s:hidden_all  == 0
		let s:hidden_all = 1
		set noshowmode
		set noruler
		set laststatus=0
		set noshowcmd
	else
		let s:hidden_all = 0
		set showmode
		set ruler
		set laststatus=2
		set showcmd
	endif
endfunction
:call ToggleHiddenAll() " Hide Status Line by default
nnoremap <S-h> :call ToggleHiddenAll()<CR>


" YCM Keymap
nnoremap <C-]> :YcmCompleter GoTo<CR>


" CoC Tab Completion
function! s:check_back_space() abort
	let col = col('.') - 1
	return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
	\ pumvisible() ? "\<C-n>" :
	\ <SID>check_back_space() ? "\<Tab>" :
	\ coc#refresh()

" CoC auto enable/disable
" Ref: https://github.com/neoclide/coc.nvim/issues/349
autocmd BufNew,BufEnter *.dart execute "silent! CocEnable"
autocmd BufLeave *.dart execute "silent! CocDisable"

